"""Exposes a URL that specifies the behavior of this scalar."""
directive @specifiedBy(
  """The URL that specifies the behavior of this scalar."""
  url: String!
) on SCALAR

type CeramicAccount implements Node {
  """Globally unique identifier of the account (DID string)"""
  id: ID!

  """
  Whether the Ceramic instance is currently authenticated with this account or not
  """
  isViewer: Boolean!
  materialpassportList(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): MaterialpassportConnection
  componentList(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): ComponentConnection
}

"""A Ceramic Commit ID"""
scalar CeramicCommitID

"""A Ceramic Stream ID"""
scalar CeramicStreamID

type Component implements Node {
  id: ID!
  mpID: CeramicStreamID!
  name: String!
  actor: ComponentActor
  created: String!
  attributes: String!
  lifecyclephase: ComponentLcp
  functionalLayer: ComponentFunctionalLayer
  mp: Materialpassport

  """Account controlling the document"""
  author: CeramicAccount!

  """Current version of the document"""
  version: CeramicCommitID!
}

enum ComponentActor {
  ARCHITECT
  CONSTRUCTION_CONTRACTOR
  DECONSTRUCTOR
  LOGISTIC_MANAGER
  MAINTENANCE_CONTRACTOR
  PRODUCT_INSTALLER
  PRODUCT_MANUFACTURER
  PRODUCT_SUPPLIER
  PROPERTY_USER
}

"""A connection to a list of items."""
type ComponentConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ComponentEdge]
}

"""An edge in a connection."""
type ComponentEdge {
  """The item at the end of the edge"""
  node: Component

  """A cursor for use in pagination"""
  cursor: String!
}

enum ComponentFunctionalLayer {
  BUILDING
  COMPONENT
  MATERIAL
  MODULE
  PRODUCT
  STOREY
}

input ComponentInput {
  mpID: CeramicStreamID!
  name: String!
  actor: ComponentActor
  created: String!
  attributes: String!
  lifecyclephase: ComponentLcp
  functionalLayer: ComponentFunctionalLayer
}

enum ComponentLcp {
  DISASSEMBLY
  REMANUFACTURING
  CONSTRUCTION
  ASSEMBLY
  DESIGN
  MAINTENANCE
  MANUFACTURING
  OPERATION
  REUSE
  TRANSPORT_LOGISTIC
}

input CreateComponentInput {
  content: ComponentInput!
  clientMutationId: String
}

type CreateComponentPayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: Component!
  clientMutationId: String
}

input CreateMaterialpassportInput {
  content: MaterialpassportInput!
  clientMutationId: String
}

type CreateMaterialpassportPayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: Materialpassport!
  clientMutationId: String
}

type Materialpassport implements Node {
  id: ID!
  name: String!
  created: String!
  completed: Boolean!

  """Account controlling the document"""
  author: CeramicAccount!

  """Current version of the document"""
  version: CeramicCommitID!
}

"""A connection to a list of items."""
type MaterialpassportConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [MaterialpassportEdge]
}

"""An edge in a connection."""
type MaterialpassportEdge {
  """The item at the end of the edge"""
  node: Materialpassport

  """A cursor for use in pagination"""
  cursor: String!
}

input MaterialpassportInput {
  name: String!
  created: String!
  completed: Boolean!
}

type Mutation {
  createMaterialpassport(input: CreateMaterialpassportInput!): CreateMaterialpassportPayload
  updateMaterialpassport(input: UpdateMaterialpassportInput!): UpdateMaterialpassportPayload
  createComponent(input: CreateComponentInput!): CreateComponentPayload
  updateComponent(input: UpdateComponentInput!): UpdateComponentPayload
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

input PartialComponentInput {
  mpID: CeramicStreamID
  name: String
  actor: ComponentActor
  created: String
  attributes: String
  lifecyclephase: ComponentLcp
  functionalLayer: ComponentFunctionalLayer
}

input PartialMaterialpassportInput {
  name: String
  created: String
  completed: Boolean
}

type Query {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  materialpassportIndex(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): MaterialpassportConnection
  componentIndex(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): ComponentConnection
}

input UpdateComponentInput {
  id: ID!
  content: PartialComponentInput!
  options: UpdateOptionsInput
  clientMutationId: String
}

type UpdateComponentPayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: Component!
  clientMutationId: String
}

input UpdateMaterialpassportInput {
  id: ID!
  content: PartialMaterialpassportInput!
  options: UpdateOptionsInput
  clientMutationId: String
}

type UpdateMaterialpassportPayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: Materialpassport!
  clientMutationId: String
}

input UpdateOptionsInput {
  """
  Fully replace the document contents instead of performing a shallow merge
  """
  replace: Boolean = false

  """Only perform mutation if the document matches the provided version"""
  version: CeramicCommitID
}

